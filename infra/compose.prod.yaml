# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/compose/compose-file/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  front:
    labels:
      - traefik.enable=true
      - traefik.http.routers.front.rule=Host(`front.arcanea.timotheedurand.fr`)
      - "traefik.http.routers.front.entrypoints=http"
      - "traefik.http.routers.front.middlewares=http_to_https@docker"
      - "traefik.http.routers.front-secured.rule=Host(`front.arcanea.timotheedurand.fr`)"
      - "traefik.http.routers.front-secured.entrypoints=https"
      - "traefik.http.routers.front-secured.tls.certresolver=tls"
    image: ghcr.io/timothee-durand/arcanea-iim/front:main
    environment:
      NODE_ENV: production
    ports:
      - 8081:80

  back:
    labels:
      - traefik.enable=true
      - traefik.http.routers.back.rule=Host(`api.arcanea.timotheedurand.fr`)
      - traefik.http.services.back.loadbalancer.server.port=3000
      - "traefik.http.routers.back.entrypoints=http"
      - "traefik.http.routers.back.middlewares=http_to_https@docker"
      - "traefik.http.routers.back-secured.rule=Host(`api.arcanea.timotheedurand.fr`)"
      - "traefik.http.routers.back-secured.entrypoints=https"
      - "traefik.http.routers.back-secured.tls.certresolver=tls"
    image: ghcr.io/timothee-durand/arcanea-iim/back:main
    ports:
      - 3000:3000
    healthcheck:
      test: [ "CMD",  "curl -f http://localhost:3000/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      redis:
        condition: service_healthy



  redis:
    image: "redis:alpine"
    ports:
      - 6379:6379
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  reverse-proxy:
    # The official v2 Traefik docker image
    image: traefik:v2.10
    command:
      - "--log.level=DEBUG"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - --entrypoints.http.address=:80
      - --entrypoints.https.address=:443
      - "--certificatesresolvers.tls.acme.tlschallenge=true"
      - "--certificatesresolvers.tls.acme.email=timothee.durand70@gmail.com"
      - "--certificatesresolvers.tls.acme.storage=acme.json"
    ports:
      - "443:443"
      - "80:80"
    labels:
      - "traefik.http.middlewares.http_to_https.redirectscheme.scheme=https"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      - "./acme.json:/acme.json"
